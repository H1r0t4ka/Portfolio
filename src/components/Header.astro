---
const currentLang = Astro.currentLocale || "es";
import { useTranslations } from "../i18n/utils";
import { languageList } from "../i18n/ui";

const translateLabels = useTranslations(
    currentLang as keyof typeof languageList,
);
---

<header
    class="flex justify-center items-center py-3 px-4 z-50 fixed top-0 left-0 w-full backdrop-blur-md shadow-sm"
>
    <div class="flex justify-between items-center w-full py-3 px-4 max-w-6xl">
        <!-- Perfil -->
        <div class="flex items-center gap-3">
            <img
                class="rounded-full w-12 h-12"
                src="./src/assets/me.jpg"
                alt="Profile picture"
            />
            <span class="font-bold text-[#1E1E1E] dark:text-white"
                >Juan Manuel Quevedo Gonzalez</span
            >
        </div>

        <!-- Bot√≥n hamburguesa (visible solo en m√≥vil) -->
        <button
            id="menu-toggle"
            class="sm:hidden p-2 rounded-lg"
            aria-label="Abrir men√∫"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="w-6 h-6 text-gray-800"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
        </button>

        <!-- Nav -->
        <nav
            id="nav-menu"
            class="hidden sm:flex flex-col sm:flex-row items-center sm:items-start gap-y-4 sm:gap-y-0 sm:gap-x-8 text-center sm:text-left absolute sm:static top-full left-0 w-full sm:w-auto shadow-lg sm:shadow-none rounded-b-2xl sm:rounded-none p-6 sm:p-0 transition-all duration-300 opacity-0 scale-y-0 origin-top"
        >
            <a
                class="transition duration-300 ease-in-out hover:scale-120 text-[#1E1E1E] dark:text-white"
                href="#sobre-mi">{translateLabels("nav.about")}</a
            >
            <a
                class="transition duration-300 ease-in-out hover:scale-120 text-[#1E1E1E] dark:text-white"
                href="#experiencia">{translateLabels("nav.experience")}</a
            >
            <a
                class="transition duration-300 ease-in-out hover:scale-120 text-[#1E1E1E] dark:text-white"
                href="#proyectos">{translateLabels("nav.projects")}</a
            >
        </nav>

        <!-- Botones -->
        <div class="flex gap-3">
            <!-- Bot√≥n idioma -->
            <button
                id="lang-toggle"
                class="p-2 rounded-full transition duration-300 ease-in-out hover:scale-120 text-[#1E1E1E] dark:text-white cursor-pointer"
                aria-label="Cambiar idioma"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="w-6 h-6"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M12 3c4.97 0 9 4.03 9 9s-4.03 9-9 9-9-4.03-9-9 4.03-9 9-9zm0 0c1.5 2.5 2.5 5.5 2.5 9S13.5 18.5 12 21m0-18C10.5 4.5 9.5 7.5 9.5 12S10.5 19.5 12 21m-8-9h16"
                    ></path>
                </svg>
            </button>

            <!-- Bot√≥n modo oscuro -->
            <button
                id="theme-toggle"
                class="p-2 cursor-pointer rounded-full transition duration-300 ease-in-out hover:scale-120 text-[#1E1E1E] dark:text-white"
                aria-label="Cambiar tema"
            >
                <!-- üåô SVG luna -->
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    class="w-6 h-6 block dark:hidden"
                    ><path
                        fill="currentColor"
                        d="M12 22c5.523 0 10-4.477 10-10c0-.463-.694-.54-.933-.143a6.5 6.5 0 1 1-8.924-8.924C12.54 2.693 12.463 2 12 2C6.477 2 2 6.477 2 12s4.477 10 10 10"
                    ></path></svg
                >

                <!-- ‚òÄÔ∏è SVG sol -->
                <svg
                    class="w-6 h-6 hidden dark:block"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    fill="none"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 5V3m0 18v-2M7.05 7.05 5.636 5.636m12.728 12.728L16.95 16.95M5 12H3m18 0h-2M7.05 16.95l-1.414 1.414M18.364 5.636 16.95 7.05M16 12a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
                    >
                    </path>
                </svg>
            </button>
        </div>
    </div>
</header>

/*Script para el men√∫ hamburguesa */
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const menuToggle = document.getElementById("menu-toggle");
        const navMenu = document.getElementById("nav-menu");

        if (!menuToggle || !navMenu) return;

        const showMenu = () => {
            navMenu.classList.remove("hidden");
            navMenu.classList.add(
                "flex",
                "flex-col",
                "bg-white",
                "transition-all",
                "duration-300",
                "ease-in-out",
                "opacity-100",
                "scale-y-100",
                "origin-top",
            );
        };

        const hideMenu = () => {
            navMenu.classList.add("opacity-0", "scale-y-0");
            navMenu.classList.remove("opacity-100", "scale-y-100");
            setTimeout(() => {
                navMenu.classList.add("hidden");
                navMenu.classList.remove("flex", "flex-col", "bg-white");
            }, 300);
        };

        const handleToggle = () => {
            if (window.innerWidth >= 640) return; // no aplicar animaciones en escritorio
            const isHidden = navMenu.classList.contains("hidden");
            if (isHidden) showMenu();
            else hideMenu();
        };

        menuToggle.addEventListener("click", handleToggle);

        // Cierra el men√∫ al hacer clic en un enlace (solo m√≥vil)
        navMenu.querySelectorAll("a").forEach((link) => {
            link.addEventListener("click", () => {
                if (window.innerWidth < 640) hideMenu();
            });
        });

        // ‚úÖ Estado correcto al cargar o redimensionar
        const handleResize = () => {
            if (window.innerWidth >= 640) {
                // Estado fijo en escritorio, sin animaci√≥n
                navMenu.classList.remove(
                    "hidden",
                    "opacity-0",
                    "scale-y-0",
                    "bg-white",
                    "transition-all",
                    "duration-300",
                    "ease-in-out",
                );
                navMenu.classList.add("flex", "flex-row");
            } else {
                // Estado inicial oculto en m√≥vil
                navMenu.classList.add("hidden");
                navMenu.classList.remove("flex-row");
            }
        };

        handleResize(); // üëà asegura el estado correcto al cargar
        window.addEventListener("resize", handleResize);
    });
</script>

<script>
    const btnTheme = document.getElementById("theme-toggle");

    // Solo necesitamos la l√≥gica del CLICK. La l√≥gica de carga inicial fue al <head>.
    btnTheme?.addEventListener("click", (e) => {
        e.preventDefault();

        // 1. Toggle la clase
        document.documentElement.classList.toggle("dark");

        // 2. Guardar preferencia en localStorage
        localStorage.setItem(
            "theme",
            document.documentElement.classList.contains("dark")
                ? "dark"
                : "light",
        );
    });
</script>

/*Script para el bot√≥n de cambio de idioma */
<script>
    // --- L√ìGICA DE ALTERNANCIA DE IDIOMA ---

    // 1. Define los idiomas soportados (debes mantener esta lista sincronizada con ui.ts)
    // Usamos esta lista para saber cu√°les son los posibles prefijos de URL.
    const LANGUAGES = ["es", "en"];
    const DEFAULT_LANG = "es";

    function toggleLanguage() {
        const currentPathname = window.location.pathname;
        let currentLang = DEFAULT_LANG;
        let pathWithoutLang = currentPathname;

        // 2. Identificar el idioma actual en la URL
        for (const lang of LANGUAGES) {
            // Buscamos el prefijo '/es/', '/en/', etc.
            const langPrefix = new RegExp(`^/${lang}(/|$)`);

            if (langPrefix.test(currentPathname)) {
                currentLang = lang;
                // Extraemos el resto de la ruta
                pathWithoutLang = currentPathname.replace(`/${lang}`, "");
                // Aseguramos que la ruta ra√≠z sea solo '/'
                if (pathWithoutLang === "") {
                    pathWithoutLang = "/";
                }
                break;
            }
        }

        // 3. Determinar el nuevo idioma (el opuesto)
        const nextLang =
            LANGUAGES.find((lang) => lang !== currentLang) || DEFAULT_LANG;

        // 4. Construir la nueva URL
        let newPathname = `/${nextLang}${pathWithoutLang}`;

        // Limpiar la URL para evitar rutas dobles (ej. /en//)
        newPathname = newPathname.replace(/\/{2,}/g, "/");

        // 5. Redirigir y forzar la recarga
        window.location.href = newPathname;
    }

    // 6. Adjuntar el evento al bot√≥n
    const langToggleBtn = document.getElementById("lang-toggle");
    if (langToggleBtn) {
        langToggleBtn.addEventListener("click", toggleLanguage);
    }
</script>
